[gd_resource type="ShaderMaterial" load_steps=14 format=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "weight"

[sub_resource type="VisualShaderNodeScalarInterp" id=2]
default_input_values = [ 0, 1.0, 1, 0.5, 2, 0.5 ]

[sub_resource type="VisualShaderNodeScalarInterp" id=3]
default_input_values = [ 0, 1.0, 1, 80.0, 2, 0.5 ]

[sub_resource type="VisualShaderNodeScalarOp" id=4]

[sub_resource type="VisualShaderNodeScalarInterp" id=5]
default_input_values = [ 0, 0.0, 1, 0.1, 2, 0.5 ]

[sub_resource type="VisualShaderNodeInput" id=6]
input_name = "texture"

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=8]
source = 5

[sub_resource type="VisualShaderNodeVectorDecompose" id=9]

[sub_resource type="VisualShaderNodeVectorCompose" id=10]

[sub_resource type="VisualShaderNodeScalarOp" id=11]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=12]
operator = 2

[sub_resource type="VisualShader" id=13]
code = "shader_type canvas_item;
uniform float weight;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:11
	float n_out11p0 = weight;

// ScalarMix:14
	float n_in14p0 = 1.00000;
	float n_in14p1 = 0.50000;
	float n_out14p0 = mix(n_in14p0, n_in14p1, n_out11p0);

// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// Input:2

// Texture:4
	vec3 n_out4p0;
	float n_out4p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, n_out3p0.xy);
		n_out4p0 = TEXTURE_tex_read.rgb;
		n_out4p1 = TEXTURE_tex_read.a;
	}

// VectorDecompose:5
	float n_out5p0 = n_out4p0.x;
	float n_out5p1 = n_out4p0.y;
	float n_out5p2 = n_out4p0.z;

// ScalarOp:9
	float n_out9p0 = n_out14p0 * n_out5p0;

// ScalarMix:17
	float n_in17p0 = 0.00000;
	float n_in17p1 = 0.10000;
	float n_out17p0 = mix(n_in17p0, n_in17p1, n_out11p0);

// ScalarOp:16
	float n_out16p0 = n_out17p0 + n_out5p1;

// ScalarMix:15
	float n_in15p0 = 1.00000;
	float n_in15p1 = 80.00000;
	float n_out15p0 = mix(n_in15p0, n_in15p1, n_out11p0);

// ScalarOp:7
	float n_out7p0 = n_out5p2 * n_out15p0;

// VectorCompose:6
	vec3 n_out6p0 = vec3(n_out9p0, n_out16p0, n_out7p0);

// Output:0
	COLOR.rgb = n_out6p0;
	COLOR.a = n_out4p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 190.711, -123.678 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1580, 300 )
nodes/fragment/2/node = SubResource( 6 )
nodes/fragment/2/position = Vector2( -120, 280 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( -120, 160 )
nodes/fragment/4/node = SubResource( 8 )
nodes/fragment/4/position = Vector2( 180, 280 )
nodes/fragment/5/node = SubResource( 9 )
nodes/fragment/5/position = Vector2( 380, 0 )
nodes/fragment/6/node = SubResource( 10 )
nodes/fragment/6/position = Vector2( 1080, 0 )
nodes/fragment/7/node = SubResource( 11 )
nodes/fragment/7/position = Vector2( 860, 120 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( 860, -140 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( 440, -220 )
nodes/fragment/14/node = SubResource( 2 )
nodes/fragment/14/position = Vector2( 640, -140 )
nodes/fragment/15/node = SubResource( 3 )
nodes/fragment/15/position = Vector2( 640, 120 )
nodes/fragment/16/node = SubResource( 4 )
nodes/fragment/16/position = Vector2( 860, -20 )
nodes/fragment/17/node = SubResource( 5 )
nodes/fragment/17/position = Vector2( 640, -20 )
nodes/fragment/connections = PoolIntArray( 2, 0, 4, 2, 3, 0, 4, 0, 4, 1, 0, 1, 9, 0, 6, 0, 6, 0, 0, 0, 11, 0, 14, 2, 11, 0, 15, 2, 15, 0, 7, 1, 5, 2, 7, 0, 7, 0, 6, 2, 4, 0, 5, 0, 11, 0, 17, 2, 16, 0, 6, 1, 14, 0, 9, 0, 5, 0, 9, 1, 17, 0, 16, 0, 5, 1, 16, 1 )

[resource]
resource_local_to_scene = true
shader = SubResource( 13 )
shader_param/weight = 0.0
